Principais coisas sobre meu desenvolvimento no app:

-> Deve-se instanciar no código principalmente os 'controls' (label, text, button,...) que irão ser modificados em algum momento da execução do app,
visto que se for apenas estilizar algo, mt provavel que apenas utilizando a Storyboard dê conta

-> Funções do 'Life Cycle' do app: lembrar que não é uma linha do tempo, no sentido de ter início -> meio -> fim sempre nessa ordem, principalmente
em relação ao 'meio', visto que existirão várias telas podendo serem abertas e fechadas, e não deve-se perder nada de conteúdo durante este processo

========================

CONSTRAINTS!

-> amarrações feitas nos itens da tela
-> define padrões de altura e largura de objetos da tela, bem como seus espaçamentos nas 4 dimensões (top, left, right, bottom) em relação a outro 
parâmetro (pode ser a outro objeto, a tela, ...)

COMO EU FIZ...

-> limitei a largura e altura dos objetos para os valores padrões, para que em qualquer tela os objetos sejam como eu quero
-> junto a isso, define ainda um padrão de posicionamento horizontal para todos os objetos como '0', ou seja, no centro da tela

========================

Classes, Objetos e Métodos úteis:

-> UIAlertController => classe responsável pelos alertas (tipo um alert em js)

- sintaxe => UIAlertController(title: String?, message: String?, preferredStyle: UIAlertController.Style)

- Como é uma classe, quando eu instancio um objeto, posso utilizar de vários métodos que a class possui, como por ex:

let errorMessage = UIAlertController(title: "ERRO!", message: "Verifique os dados digitados e tente novamente", preferredStyle: .alert)
//errorMessage.message = "teste" --> altera o valor do atributo 'message' que coloquei quando instanciei o objeto
errorMessage.addAction(okButton)

-----------------------

-> UIAlertAction => classe responsável por definir certas coisas sobre uma ação, geralmente um espaço para o usuário clicar e sair do alert.

sintaxe => UIAlertAction(title: String?, style: UIAlertAction.Style, handler: ((UIAlertAction) -> Void)? = nil)

É usado juntamente do UIAlertController geralmente da seguinte maneira (utilizando o método addAction() do UIAlertController):

let successMessage = UIAlertController(title: "Sucesso!", message: "êxito em salvar o contato", preferredStyle: .alert)
successMessage.addAction(UIAlertAction(title: "OK", style: .default))

-----------------------

-> Para ter a perfeita combinação entre as duas classes, deve-se por fim utilizar um método da ViewController chamado present(), de forma a
definitivamente apresentar o alerta criado. O Fluxo seria o seguinte:

UIAlertController --> alerta.addAction(UIAlertAction) --> ViewController.present(alerta)
(criar alerta)    --> (definir uma ação para o alerta) --> amarrar esse alerta à ViewController (trocar ViewController para self)

-----------------------

ex:

let alert = UIAlertController(title: "My Alert", message: "This is an alert.", preferredStyle: .alert)

alert.addAction(UIAlertAction(title: NSLocalizedString("OK", comment: "Default action"), style: .default, handler: { _ in 
NSLog("The \"OK\" alert occured.")}))

self.present(alert, animated: true, completion: nil)

========================

Como instanciar novas telas!

------
OPÇÃO 1:

Link: https://www.youtube.com/watch?v=Dh7fa1fdzBo

-> Lógica muito parecida com em Java: você deverá de alguma forma definir que uma nova tela será exibida (ao clicar em um botão, por ex)
-> Para isso, existem algumas etapas padrões a serem seguidas:

1. Criar uma nova ViewController

- A ViewController é basicamente a nossa tela, ou seja, se queremos mais telas...
- É preciso criar 2x: primeiro cria a nova tela no Storyboard (da mesma forma que se cria textfields, buttons,...), depois cria um novo arquivo
para a nova ViewController (basicamente para ter o código próprio dessa nova Tela)

2. Definir um ID


3. Métodos


------

OPÇÃO 2:

Link: https://www.youtube.com/watch?v=DxCydBmOqXU

========================

GERAL:

----
TROCAR TIPO DE TECLADO

-> aquele .numberpad funcionou no iphone 7 mas no 8 deu esse erro: 
"Can't find keyplane that supports type 4 for keyboard iPhone-PortraitChoco-NumberPad; using 25889_PortraitChoco_iPhone-Simple-Pad_Default"

. DESCOBRI => .numberpad é um teclado antigo, só com numeros. Funciona em versoes antigas de iphone. Nas novas tem que ser outro, tem varios tipos
de keyboardtype testar:

.numberpad (n funcinou)
.phonepad (n funcionou)
.asciiCapableNumberPad (n funcionou)

----



